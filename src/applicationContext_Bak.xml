<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
    default-lazy-init="true">

    <description>Spring公共配置 </description>

    <!-- =================================================================== -->
    <!-- 定义受环境影响易变的变量 -->
    <!-- =================================================================== -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <!-- 标准配置 -->
                <value>classpath*:/application.properties</value>
                <!-- 测试环境中与公共环境不相同的部分(例如mysql密码配置)，放入application.local.properties中 -->
                <value>classpath*:/application.local.properties</value>
            </list>
        </property>
    </bean>

    <!-- =================================================================== -->
    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <!-- =================================================================== -->
    <context:component-scan base-package="sanwei">
        <context:include-filter type="regex" expression=".*" />
        <context:include-filter type="regex" expression="sanwei\.recommendengine\.*" />
        <context:include-filter type="regex" expression="\.tool\.schedule.book\.*" />
    </context:component-scan>

    <!-- =================================================================== -->
    <!-- SpringContext Holder -->
    <!-- =================================================================== -->
    <bean id="springContextHolder" class="sanwei.util.SpringContextHolder" lazy-init="false" />

    <!-- =================================================================== -->
    <!-- 数据源/hibernate/事务配置 -->
    <!-- =================================================================== -->

    <!-- 基础数据源配置 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="initialSize" value="${dbcp.initialSize}" />
        <property name="maxActive" value="${dbcp.maxActive}" />
        <property name="maxIdle" value="${dbcp.maxIdle}" />
        <property name="defaultAutoCommit" value="false" />
    </bean>


    <!-- 数据源配置,使用应用服务器的数据库连接池 <jee:jndi-lookup id="dataSource" jndi-name="ycps-test" /> -->

    <!-- Hibernate配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="namingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <!-- ehcache1.6 <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> <prop 
                    key="hibernate.cache.provider_configuration_file_resource_path">ehcache/ehcache.xml</prop> -->
                <!-- http://ehcache.org/documentation/hibernate.html Hibernate Second Level Cache -->
                <prop key="hibernate.cache.region.factory_class"> net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate.xml</prop>

                <!--<prop key="hibernate.hbm2ddl.auto">update</prop> -->
                <prop key="hibernate.query.substitutions">true 'Y', false 'N', yes 'Y', no 'N'</prop>
                <!-- for debug -->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
                <prop key="hibernate.generate_statistics">true</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>sanwei.entity</value>
                <value>sanwei.recommendengine</value>
            </list>
        </property>
        
    </bean>
   
	<!-- 开启注解方式注入 nijiayuan
	<context:annotation-config/>
	-->

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- =================================================================== -->
    <!-- Security class from Spring Security - used to configure Password -->
    <!-- Encryption in UserManagerImpl. Can override in security.xml. -->
    <!-- =================================================================== -->
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />

    <!-- =================================================================== -->
    <!-- Freemarker封装配置 -->
    <!-- =================================================================== -->
    <bean id="freeMarkerConfigurer" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:/template" />
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="template_update_delay">0</prop>
            </props>
        </property>
    </bean>



    <!-- =================================================================== -->
    <!-- LocalCache,支持限制总数,Idle time/LRU失效,持久化到磁盘等功能 -->
    <!-- Cache cache = ehcacheManager.getCache("contentInfoCache"); -->
    <!-- =================================================================== -->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/ehcache/ehcache.xml" />
    </bean>


    <!-- =================================================================== -->
    <!-- 多线程 taskExecutor -->
    <!-- =================================================================== -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2" />
        <property name="maxPoolSize" value="60" />
        <property name="queueCapacity" value="600" />
        <property name="keepAliveSeconds" value="200" />
    </bean>
	
	
   	
   	
</beans>